import java.util.*; // for ArrayList

/**
* @author Claire Jaja
* @version 9/16/14
*
* Project Euler Problem 12
* The sequence of triangle numbers is generated by adding the natural numbers.
* So the 7th triangle number would be 1+2+3+4+5+6+7 = 28.
* The first ten terms would be: 1,3,6,10,15,21,28,36,45,55, ...
* Let us list the factors of the first seven triangle numbers:
* 1: 1
* 3: 1,3
* 6: 1,2,3,6
* 10: 1,2,5,10
* 15: 1,3,5,15
* 21: 1,3,7,21
* 28: 1,2,4,7,14,28
* We can see that 28 is the first triangle number to have over five divisors.
* What is the value of the first triangle number to have over 500 divisors?
*/

public class HighlyDivisibleTriangularNumber
{
    public static void main(String[] args) {
        // argument is the number of divisors we're looking for
        int divisors = 5; // if no arguments, use 5
        if (args.length > 0) {
            try {
                divisors = Integer.parseInt(args[0]);
            } catch (NumberFormatException e) {
                System.err.println("Argument must be an integer.");
                System.exit(1);
            }
        }

        boolean numberFound = false;
        int n = 1;
        while (!numberFound) {
            n += 1;
            // the number of divisors for the nth triangle number
            // is equal to # of divisors of n * # of divisors of (n+1)/2
            int numberDivisors = countDivisors(n);
            if (n % 2 == 0) {
                numberDivisors *= 1;
            } else {
                numberDivisors *= countDivisors((n+1)/2);
            }
            if (numberDivisors >= divisors) {
                numberFound = true;
            }
        }
        int triangleNumber = 0;
        for (int i = 1; i <= n; i++) {
            triangleNumber += i;
        }
        System.out.println(triangleNumber);
    }

    public static int countDivisors(int num) {
        int numberDivisors = 0;
        for (int i = 1; i <= num; i++) {
            if (num % i == 0) {
                numberDivisors++;
            }
        }
        return numberDivisors;
    }

}
